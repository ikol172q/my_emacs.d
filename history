;; -*- mode: emacs-lisp; coding: utf-8-unix -*-
;; Minibuffer history file, automatically generated by ‘savehist’.

(setq savehist-minibuffer-history-variables '(ido-file-history file-name-history xref--read-identifier-history ivy-history read-expression-history minibuffer-history buffer-name-history extended-command-history shell-command-history evil-ex-history))
(setq ido-file-history '("."))
(setq file-name-history '("~/.emacs.d/elpa/magit-20170709.1106/magit-autoloads.el" "~/.emacs.d/elpa/git-commit-20170609.2310/git-commit-autoloads.el" "~/.emacs.d/elpa/with-editor-20170707.1401/with-editor-autoloads.el" "~/.emacs.d/elpa/magit-popup-20170709.510/magit-popup-autoloads.el" "~/.emacs.d/elpa/async-20170610.2241/async-autoloads.el" "~/.emacs.d/elpa/dash-20170613.151/dash-autoloads.el" "~/.emacs.d/custom-set-variables.el" "~/OneDrive - University of Colorado at Boulder Office 365/Documents/GitHubBitbucket/DataMining/Titanic_ML_from_Disaster/src/Titanic_ML_from_Disaster-Guohui’s MacBook Pro.ipynb" "~/.emacs.d/elpa/helm-20170708.1207/helm-autoloads.el" "~/.emacs.d/elpa/helm-core-20170701.629/helm-core-autoloads.el" "~/.emacs.d/custom-set-variables.el" "~/.emacs.d/lisp/init-multiple-cursors.el" "~/Desktop/UxAS_pulls/OpenUxAS/src/Services/00_ServiceTemplate.cpp" "~/Desktop/UxAS_pulls/OpenUxAS/src/Services/00_ServiceTemplate.h" "~/Desktop/UxAS_pulls/OpenUxAS/src/Services/00_ServiceList.h" "~/Desktop/UxAS_pulls/OpenUxAS/src/DPSS/Dpss.h" "~/Desktop/UxAS_pulls/OpenUxAS/src/DPSS/DpssDataTypes.cpp" "~/Desktop/UxAS_pulls/OpenUxAS/src/DPSS/DpssApi.cpp" "~/Desktop/UxAS_pulls/OpenUxAS/src/DPSS/Dpss.cpp" "~/Desktop/UxAS_pulls/OpenUxAS/src/DPSS/DRand.h" "~/Desktop/UxAS_pulls/OpenUxAS/src/DPSS/DRand.cpp" "~/Desktop/virtualenvfolder/pip-selfcheck.json" "~/Desktop/test.md" "~/Untitled.ipynb" "~/Desktop/test.md" "~/Untitled.ipynb" "~/.emacs.d/elpa/tabbar-20160524.1401/tabbar-autoloads.el" "~/.emacs.d/custom-set-variables.el" "~/Downloads/ob-ipython.el" "~/.emacs.d/elpa/s-buffer-20130605.1424/s-buffer-autoloads.el" "~/.emacs.d/elpa/noflet-20141102.654/noflet-autoloads.el" "~/.emacs.d/custom-set-variables.el" "~/Downloads/dash.el" "~/.emacs.d/lisp/init-elpa.el" "~/.emacs.d/elpa/eww-lnum-20150102.712/eww-lnum-autoloads.el" "~/.emacs.d/custom-set-variables.el" "~/Desktop/test.md" "~/.emacs.d/elpa/impatient-mode-20170505.1921/impatient-mode-autoloads.el" "~/.emacs.d/custom-set-variables.el" "~/.emacs.d/elpa/markdown-preview-mode-20161211.1443/markdown-preview-mode-autoloads.el" "~/.emacs.d/elpa/web-server-20140905.1706/web-server-autoloads.el" "~/.emacs.d/elpa/uuidgen-20140918.1601/uuidgen-autoloads.el" "~/.emacs.d/custom-set-variables.el" "~/.emacs.d/elpa/markdown-mode+-20170320.1404/markdown-mode+-autoloads.el" "~/.emacs.d/elpa/markdown-mode-20170707.1030/markdown-mode-autoloads.el" "~/.emacs.d/custom-set-variables.el" "~/Untitled.ipynb" "~/Untitled1.ipynb" "~/Desktop/test" "~/.emacs.d/init.el" "~/.emacs.d/elpa/ein-20170630.1941/ein-autoloads.el" "~/.emacs.d/elpa/websocket-20170610.2117/websocket-autoloads.el" "~/.emacs.d/elpa/auto-complete-20170124.1845/auto-complete-autoloads.el" "~/.emacs.d/elpa/deferred-20170531.2135/deferred-autoloads.el" "~/.emacs.d/elpa/skewer-mode-20170122.938/skewer-mode-autoloads.el" "~/.emacs.d/elpa/request-20170131.1747/request-autoloads.el" "~/Desktop/UxAS_pulls/OpenUxAS/examples/02_Example_WaterwaySearch/runUxAS_WaterwaySearch.sh" "~/Desktop/UxAS_pulls/OpenUxAS/examples/02_Example_WaterwaySearch/README.md" "~/Desktop/UxAS_pulls/OpenUxAS/examples/02_Example_WaterwaySearch/Scenario_WaterwaySearch.xml" "~/Desktop/UxAS_pulls/OpenUxAS/examples/02_Example_WaterwaySearch/runHeadless.sh" "~/Desktop/UxAS_pulls/OpenUxAS/examples/02_Example_WaterwaySearch/runAMASE_WaterwaySearch.sh" "~/Desktop/virtualenvfolder/bin/pip3.5" "~/.emacs.d/elpa/rainbow-mode-0.13/rainbow-mode-autoloads.el" "~/.emacs.d/custom-set-variables.el" "~/.emacs.d/lisp/init-color-theme.el" "~/.emacs.d/custom-set-variables.el" "~/.emacs.d/elpa/request-0.2.0/request-pkg.el" "~/.emacs.d/custom-set-variables.el" "~/" "~/Desktop/UxAS_pulls/OpenUxAS/src/Services/AutonomyMonitors/VehicleStateListenerService.h" "~/Desktop/UxAS_pulls/OpenUxAS/src/Services/AutonomyMonitors/VehicleStateListenerService.cpp" "~/Desktop/UxAS_pulls/OpenUxAS/src/LMCP/afrl/cmasi/FollowPathCommand.h" "~/Desktop/UxAS_pulls/OpenUxAS/src/Services/AssignmentTreeBranchBoundBase.cpp" "~/Desktop/UxAS_pulls/OpenUxAS/src/Services/00_ServiceTemplate.cpp" "~/Desktop/UxAS_pulls/OpenUxAS/src/Services/AutomationRequestValidatorService.cpp" "~/Desktop/UxAS_pulls/OpenUxAS/src/Services/" "~/Desktop/UxAS_pulls/OpenUxAS/src/Services/AssignmentTreeBranchBoundBase.cpp" "~/Desktop/UxAS_pulls/OpenUxAS/get-pip.py" "~/Desktop/UxAS_pulls/OpenUxAS/src/Services/AutonomyMonitors/VehicleStateListenerService.cpp" "~/.emacs.d/elpa/projectile-0.14.0/projectile-autoloads.el" "~/.emacs.d/elpa/pkg-info-0.6/pkg-info-autoloads.el" "~/.emacs.d/elpa/epl-0.8/epl-autoloads.el" "~/.emacs.d/custom-set-variables.el" "~/Desktop/UxAS_pulls/OpenUxAS/examples/02_Example_WaterwaySearch_Modified_Wind/Scenario_WaterwaySearch.xml" "~/Desktop/UxAS_pulls/OpenUxAS/examples/02_Example_WaterwaySearch_Modified_Wind/runAMASE_WaterwaySearch.sh" "~/.emacs.d/init.el" "~/Google Drive/Course/Course2016Fall/CSCI5352_Network_Analysis_and_Modeling/PS2/code/my.py" "~/Google Drive/Course/Course2016Fall/CSCI5352_Network_Analysis_and_Modeling/PS1/code/ps1.py" "~/Google Drive/Course/Course2016Fall/CSCI5352_Network_Analysis_and_Modeling/PS1/code/mnd.py" "~/Google Drive/Course/Course2016Fall/CSCI5352_Network_Analysis_and_Modeling/PS1/code/my.py" "~/Documents/MATLAB/SDN/test03.m" "~/Documents/MATLAB/SDN/test02.m" "~/Documents/MATLAB/SDN/test01.m" "~/Documents/MATLAB/2017SummerRA/Dubins/Dubins.m" "~/.emacs.d/lisp/speedbar-extension.el" "~/Google Drive/MasterPaper/L 1 范数支持向量机在代谢组学中的应用.pdf" "~/.emacs.d/elpa/sr-speedbar-20140914.2339/sr-speedbar.el" "/Applications/Emacs.app/Contents/Resources/lisp/simple.el.gz" "~/Google Drive/Course/Course2016Fall/CSCI_5622_Machine_Learning/PS2/code/tests.py" "~/.emacs.d/lisp/init-elpa.el" "~/.emacs.d/elpa/request-deferred-0.3.0/request-deferred-autoloads.el" "~/.emacs.d/elpa/deferred-0.5.1/deferred-autoloads.el" "~/.emacs.d/lisp/init-python-mode.el" "~/Google Drive/Course/Course2016Fall/CSCI_5622_Machine_Learning/PS2/code/plotfile.py" "~/Documents/" "~/.emacs.d/lisp/init-gui-frames.el" "~/OneDrive - University of Colorado at Boulder Office 365/Documents/GitHubBitbucket/DataMining/HousePrices_AdvancedRegressionTechniques/README.md" "~/OneDrive - University of Colorado at Boulder Office 365/Documents/GitHubBitbucket/DataMining/HousePrices_AdvancedRegressionTechniques/House_Prices_Advanced_Regression_Techniques.ipynb"))
(setq xref--read-identifier-history '("d"))
(setq ivy-history '("*Messages*" "*helm-mode-package-install*" "init.el" "*shell*" "*scratch*" "*Completions*" #("scratch*" 0 8 (ivy-index 0)) #("Messages*" 0 9 (ivy-index 0)) #("shell*" 0 6 (ivy-index 0)) "test.md" "*ein: http://127.0.0.1:8888/Untitled.ipynb*" "*ein:notebooklist http://127.0.0.1:8888*" #("mess" 0 4 (ivy-index 0)) #("*" 0 1 (ivy-index 0)) #("she" 0 3 (ivy-index 1)) "*ein:log-all*" "*Shell Command Output*" "*Compile-Log*" "*terminal*" "*ein: http://127.0.0.1:8888/Titanic_ML_from_Disaster.ipynb*" "*ein: http://127.0.0.1:8888/Titanic_ML_from_Disaster-Guohui’s MacBook Pro.ipynb*" "jupyter notebook" #("ein" 0 3 (ivy-index 0)) "*SPEEDBAR*" "*ein: http://127.0.0.1:8888/Untitled.ipynb*<2>" #("ein:log-all*" 0 12 (ivy-index 0)) #("Compile-Log*" 0 12 (ivy-index 0)) #("Me" 0 2 (ivy-index 0)) #("terminal*" 0 9 (ivy-index 0)) "*Help*" #("*eshell*" 0 8 (ivy-index 0)) #("Scenario_WaterwaySearch.xml" 0 27 (ivy-index 0)) #("runAMASE_WaterwaySearch.sh" 0 26 (ivy-index 0)) #("runHeadless.sh" 0 14 (ivy-index 0)) #("run" 0 3 (ivy-index 0)) #("C" 0 1 (ivy-index 0)) #("eshell" 0 6 (ivy-index 0)) "test01.m" "Dubins.m" "*Ibuffer*"))
(setq read-expression-history '("wq"))
(setq minibuffer-history '("magit" "8888" "jupy " "G" "helm" "tabbar" "s-buffer" "/bin/bash" "eww-lnum" "impatient-mode" "markdown-preview-mode" "markdown-mode+" "np.random" "install" "8889" "8888/?token=745299ba50f09ed3b46baab65dded0a0b81f773b3e33798b" "?token=745299ba50f09ed3b46baab65dded0a0b81f773b3e33798b" "ein" "rainbow-mode" "/bin/bashsdf" "db" "src/Services/AutomationRequestValidatorService.cpp" "get-pip.py" "projectile" "request-deferred" "evil-args" "evil"))
(setq buffer-name-history '("*helm-mode-kill-buffer*" "*helm-mode-package-install*" "init.el" "dash-autoloads.el" "*eshell*" "*markdown-output*" "Titanic_ML_from_Disaster-Guohui’s MacBook Pro.ipynb" "00_ServiceTemplate.h" "DRand.cpp" "Dpss.cpp" "DpssApi.cpp" "00_ServiceTemplate.cpp" "DpssDataTypes.cpp" "Untitled.ipynb" "*shell*" "*markdown-output*" "test.md" "eww-lnum-autoloads.el" "Untitled1.ipynb" "*ein: http://127.0.0.1:8888/Untitled1.ipynb*" "*Messages*" "*ein:notebooklist http://127.0.0.1:8888*" "*Compile-Log*" "*terminal*" "*ein: http://127.0.0.1:8888/Titanic_ML_from_Disaster.ipynb*" "*ein: http://127.0.0.1:8888/Titanic_ML_from_Disaster-Guohui’s MacBook Pro.ipynb*" "*ein: http://127.0.0.1:8888/Untitled.ipynb*" "*ein: http://127.0.0.1:8888/Untitled.ipynb*<2>" "*Packages*" "*ansi-term*" "*Colors*" "*Customize Group: Speedbar*" "test01.m" "L 1 范数支持向量机在代谢组学中的应用.pdf"))
(setq extended-command-history '(#("install" 0 7 (ivy-index 0)) #("refre" 0 5 (ivy-index 0)) #("eshell" 0 6 (ivy-index 0)) #("ein" 0 3 (ivy-index 1)) #("shell" 0 5 (ivy-index 0)) #("color-the" 0 9 (ivy-index 6)) #("speedbar-mode" 0 13 (ivy-index 0)) #("speed" 0 5 (ivy-index 0)) "tabbar-mode" #("tabbar" 0 6 (ivy-index 0)) #("instal" 0 6 (ivy-index 0)) #("refresh" 0 7 (ivy-index 0)) #("term" 0 4 (ivy-index 1)) #("python-mode" 0 11 (ivy-index 0)) #("markdown-preview-" 0 17 (ivy-index 1)) #("inst" 0 4 (ivy-index 0)) #("markdown" 0 8 (ivy-index 1)) #("markdown-prev" 0 13 (ivy-index 1)) #("live" 0 4 (ivy-index 1)) #("insta" 0 5 (ivy-index 0)) #("ein:note" 0 8 (ivy-index 1)) #("ein:" 0 4 (ivy-index 1)) #("bash" 0 4 (ivy-index 0)) #("ein:byte-compile-ein" 0 20 (ivy-index 0)) #("ein:i" 0 5 (ivy-index 0)) #("package-menu" 0 12 (ivy-index 2)) #("package-m" 0 9 (ivy-index 0)) #("ei" 0 2 (ivy-index 0)) #("list" 0 4 (ivy-index 0)) #("ins" 0 3 (ivy-index 0)) #("refres" 0 6 (ivy-index 0)) #("an" 0 2 (ivy-index 0)) #("1" 0 1 (ivy-index 0)) #("ter" 0 3 (ivy-index 1)) #("rain" 0 4 (ivy-index 0)) #("list-colors" 0 11 (ivy-index 0)) #("ans" 0 3 (ivy-index 0)) #("pa" 0 2 (ivy-index 0)) #("pac" 0 3 (ivy-index 1)) #("pack" 0 4 (ivy-index 2)) #("gnu" 0 3 (ivy-index 0)) #("li" 0 2 (ivy-index 0)) #("package" 0 7 (ivy-index 2)) #("in" 0 2 (ivy-index 1)) #("dired" 0 5 (ivy-index 0)) #("she" 0 3 (ivy-index 0)) #("eval-buffer" 0 11 (ivy-index 0)) "projectile-mode" #("projectile" 0 10 (ivy-index 4)) #("projectile-discover-projects-in-directory" 0 41 (ivy-index 0)) #("b" 0 1 (ivy-index 0)) #("buff" 0 4 (ivy-index 0)) "
shell
speedbar
package-install
rgrep
org-mode
package-refresh-contents
refill-mode
cd
5x5" #("cedet" 0 5 (ivy-index 0)) #("s" 0 1 (ivy-index 0)) #("packa" 0 5 (ivy-index 0)) #("rgrep" 0 5 (ivy-index 0))))
(setq shell-command-history '("python"))
(setq evil-ex-history '(#("wq" 0 1 (ex-index 1) 1 2 (ex-index 2)) #("q" 0 1 (ex-index 1))))
(setq search-ring '("speedbar" "sr-speedbar" "sr-sp" "helm" "fci" "fill" "fi" "projectile" "scroll" "setq" "ein" "init-evil" "package"))
(setq regexp-search-ring 'nil)
(setq kill-ring '("(setq byte-compile-warnings '(not free-vars ))" "speedbar" "(require 'helm)
(require 'helm-config)" "/sr-speedbar.elc:Warning: reference to
    free variable ‘helm-alive-p’" "testsimpleclip!" #("setq byte-compile-warnings '(not free-vars ))" 0 4 (face font-lock-keyword-face fontified t) 4 5 (fontified t) 5 10 (fontified t) 10 18 (fontified t) 18 29 (fontified t) 29 33 (fontified t) 33 38 (fontified t) 38 45 (fontified t)) "testsimpleclip!" "(setq byte-compile-warnings '(not free-vars ))" #("(global-set-key (kbd \"C-c h\") 'helm-command-prefix)
(global-unset-key (kbd \"C-x c\"))

(define-key helm-map (kbd \"<tab>\") 'helm-execute-persistent-action) ; rebind tab to run persistent action
(define-key helm-map (kbd \"C-i\") 'helm-execute-persistent-action) ; make TAB work in terminal
(define-key helm-map (kbd \"C-z\")  'helm-select-action) ; list actions using C-z

(when (executable-find \"curl\")
  (setq helm-google-suggest-use-curl-p t))

(setq helm-split-window-in-side-p           t ; open helm buffer inside current window, not occupy whole other window
      helm-move-to-line-cycle-in-source     t ; move to end or beginning of source when reaching top or bottom of source.
      helm-ff-search-library-in-sexp        t ; search for library in `require' and `declare-function' sexp.
      helm-scroll-amount                    8 ; scroll 8 lines other window using M-<next>/M-<prior>
      helm-ff-file-name-history-use-recentf t
      helm-echo-input-in-header-line t)

(defun spacemacs//helm-hide-minibuffer-maybe ()
  \"Hide minibuffer in Helm session if we use the header line as input field.\"
  (when (with-helm-buffer helm-echo-input-in-header-line)
    (let ((ov (make-overlay (point-min) (point-max) nil nil t)))
      (overlay-put ov 'window (selected-window))
      (overlay-put ov 'face
                   (let ((bg-color (face-background 'default nil)))
                     `(:background ,bg-color :foreground ,bg-color)))
      (setq-local cursor-type nil))))


(add-hook 'helm-minibuffer-set-up-hook
          'spacemacs//helm-hide-minibuffer-maybe)

(setq helm-autoresize-max-height 0)
(setq helm-autoresize-min-height 20)
(helm-autoresize-mode 1)

(helm-mode 1)" 0 21 (fontified t) 21 28 (face font-lock-string-face fontified t) 28 75 (fontified t) 75 82 (face font-lock-string-face fontified t) 82 112 (fontified t) 112 119 (face font-lock-string-face fontified t) 119 154 (fontified t) 154 156 (face font-lock-comment-delimiter-face fontified t) 156 192 (face font-lock-comment-face fontified t) 192 218 (fontified t) 218 223 (face font-lock-string-face fontified t) 223 258 (fontified t) 258 260 (face font-lock-comment-delimiter-face fontified t) 260 286 (face font-lock-comment-face fontified t) 286 312 (fontified t) 312 317 (face font-lock-string-face fontified t) 317 341 (fontified t) 341 343 (face font-lock-comment-delimiter-face fontified t) 343 357 (face font-lock-comment-face fontified t) 357 366 (face font-lock-comment-face fontified t) 366 367 (fontified t) 367 368 (fontified t) 368 372 (face font-lock-keyword-face fontified t) 372 390 (fontified t) 390 396 (face font-lock-string-face fontified t) 396 398 (fontified t) 398 401 (fontified t) 401 405 (face font-lock-keyword-face fontified t) 405 443 (fontified t) 443 447 (face font-lock-keyword-face fontified t) 447 488 (fontified t) 488 490 (face font-lock-comment-delimiter-face fontified t) 490 560 (face font-lock-comment-face fontified t) 560 606 (fontified t) 606 608 (face font-lock-comment-delimiter-face fontified t) 608 682 (face font-lock-comment-face fontified t) 682 728 (fontified t) 728 730 (face font-lock-comment-delimiter-face fontified t) 730 753 (face font-lock-comment-face fontified t) 753 760 (face (font-lock-constant-face font-lock-comment-face) fontified t) 760 767 (face font-lock-comment-face fontified t) 767 783 (face (font-lock-constant-face font-lock-comment-face) fontified t) 783 791 (face font-lock-comment-face fontified t) 791 837 (fontified t) 837 839 (face font-lock-comment-delimiter-face fontified t) 839 866 (face font-lock-comment-face fontified t) 866 892 (face font-lock-comment-face fontified t) 892 980 (fontified t) 980 985 (face font-lock-keyword-face fontified t) 985 986 (fontified t) 986 1023 (face font-lock-function-name-face fontified t) 1023 1029 (fontified t) 1029 1104 (face font-lock-doc-face fontified t) 1104 1108 (fontified t) 1108 1112 (face font-lock-keyword-face fontified t) 1112 1114 (fontified t) 1114 1130 (face font-lock-keyword-face fontified t) 1130 1168 (fontified t) 1168 1171 (face font-lock-keyword-face fontified t) 1171 1291 (fontified t) 1291 1305 (fontified t) 1305 1325 (fontified t) 1325 1328 (face font-lock-keyword-face fontified t) 1328 1392 (fontified t) 1392 1396 (fontified t) 1396 1407 (face font-lock-builtin-face fontified t) 1407 1418 (fontified t) 1418 1429 (face font-lock-builtin-face fontified t) 1429 1443 (fontified t) 1443 1450 (fontified t) 1450 1460 (face font-lock-keyword-face fontified t) 1460 1574 (fontified t) 1574 1578 (face font-lock-keyword-face fontified t) 1578 1610 (fontified t) 1610 1614 (face font-lock-keyword-face fontified t) 1614 1672 (fontified t) 1672 1685 (fontified t)) "testsimpleclip!" #("(require 'helm)
(require 'helm-config)

;; The default \"C-x c\" is quite close to \"C-x C-c\", which quits Emacs.
;; Changed to \"C-c h\". Note: We must set \"C-c h\" globally, because we
;; cannot change `helm-command-prefix-key' once `helm-config' is loaded.
(global-set-key (kbd \"C-c h\") 'helm-command-prefix)
(global-unset-key (kbd \"C-x c\"))

(define-key helm-map (kbd \"<tab>\") 'helm-execute-persistent-action) ; rebind tab to run persistent action
(define-key helm-map (kbd \"C-i\") 'helm-execute-persistent-action) ; make TAB work in terminal
(define-key helm-map (kbd \"C-z\")  'helm-select-action) ; list actions using C-z

(when (executable-find \"curl\")
  (setq helm-google-suggest-use-curl-p t))

(setq helm-split-window-in-side-p           t ; open helm buffer inside current window, not occupy whole other window
      helm-move-to-line-cycle-in-source     t ; move to end or beginning of source when reaching top or bottom of source.
      helm-ff-search-library-in-sexp        t ; search for library in `require' and `declare-function' sexp.
      helm-scroll-amount                    8 ; scroll 8 lines other window using M-<next>/M-<prior>
      helm-ff-file-name-history-use-recentf t
      helm-echo-input-in-header-line t)

(defun spacemacs//helm-hide-minibuffer-maybe ()
  \"Hide minibuffer in Helm session if we use the header line as input field.\"
  (when (with-helm-buffer helm-echo-input-in-header-line)
    (let ((ov (make-overlay (point-min) (point-max) nil nil t)))
      (overlay-put ov 'window (selected-window))
      (overlay-put ov 'face
                   (let ((bg-color (face-background 'default nil)))
                     `(:background ,bg-color :foreground ,bg-color)))
      (setq-local cursor-type nil))))


(add-hook 'helm-minibuffer-set-up-hook
          'spacemacs//helm-hide-minibuffer-maybe)

(setq helm-autoresize-max-height 0)
(setq helm-autoresize-min-height 20)
(helm-autoresize-mode 1)

(helm-mode 1)" 0 1 (fontified t) 1 8 (fontified t face font-lock-keyword-face) 8 10 (fontified t) 10 14 (fontified t face font-lock-constant-face) 14 17 (fontified t) 17 24 (fontified t face font-lock-keyword-face) 24 26 (fontified t) 26 37 (fontified t face font-lock-constant-face) 37 38 (fontified t) 38 39 (fontified t) 39 40 (fontified t) 40 43 (fontified t face font-lock-comment-delimiter-face) 43 111 (fontified t face font-lock-comment-face) 111 114 (fontified t face font-lock-comment-delimiter-face) 114 181 (fontified t face font-lock-comment-face) 181 184 (fontified t face font-lock-comment-delimiter-face) 184 199 (fontified t face font-lock-comment-face) 199 203 (fontified t face (font-lock-constant-face font-lock-comment-face)) 203 222 (fontified t face (font-lock-constant-face font-lock-comment-face)) 222 230 (fontified t face font-lock-comment-face) 230 241 (fontified t face (font-lock-constant-face font-lock-comment-face)) 241 254 (fontified t face font-lock-comment-face) 254 275 (fontified t) 275 282 (fontified t face font-lock-string-face) 282 329 (fontified t) 329 336 (fontified t face font-lock-string-face) 336 366 (fontified t) 366 373 (fontified t face font-lock-string-face) 373 408 (fontified t) 408 410 (fontified t face font-lock-comment-delimiter-face) 410 446 (fontified t face font-lock-comment-face) 446 472 (fontified t) 472 477 (fontified t face font-lock-string-face) 477 512 (fontified t) 512 514 (fontified t face font-lock-comment-delimiter-face) 514 539 (fontified t face font-lock-comment-face) 539 540 (face font-lock-comment-face fontified t) 540 566 (fontified t) 566 571 (fontified t face font-lock-string-face) 571 595 (fontified t) 595 597 (fontified t face font-lock-comment-delimiter-face) 597 620 (fontified t face font-lock-comment-face) 620 622 (fontified t) 622 626 (fontified t face font-lock-keyword-face) 626 644 (fontified t) 644 650 (fontified t face font-lock-string-face) 650 655 (fontified t) 655 659 (fontified t face font-lock-keyword-face) 659 697 (fontified t) 697 701 (fontified t face font-lock-keyword-face) 701 742 (fontified t) 742 744 (fontified t face font-lock-comment-delimiter-face) 744 754 (fontified t face font-lock-comment-face) 754 814 (fontified t face font-lock-comment-face) 814 860 (fontified t) 860 862 (fontified t face font-lock-comment-delimiter-face) 862 936 (fontified t face font-lock-comment-face) 936 982 (fontified t) 982 984 (fontified t face font-lock-comment-delimiter-face) 984 1007 (fontified t face font-lock-comment-face) 1007 1014 (fontified t face (font-lock-constant-face font-lock-comment-face)) 1014 1021 (fontified t face font-lock-comment-face) 1021 1037 (fontified t face (font-lock-constant-face font-lock-comment-face)) 1037 1040 (fontified t face font-lock-comment-face) 1040 1045 (face font-lock-comment-face fontified t) 1045 1091 (fontified t) 1091 1093 (fontified t face font-lock-comment-delimiter-face) 1093 1146 (fontified t face font-lock-comment-face) 1146 1234 (fontified t) 1234 1239 (fontified t face font-lock-keyword-face) 1239 1240 (fontified t) 1240 1277 (fontified t face font-lock-function-name-face) 1277 1283 (fontified t) 1283 1314 (fontified t face font-lock-doc-face) 1314 1358 (fontified t face font-lock-doc-face) 1358 1359 (fontified t) 1359 1362 (fontified t) 1362 1366 (fontified t face font-lock-keyword-face) 1366 1422 (fontified t) 1422 1425 (fontified t face font-lock-keyword-face) 1425 1545 (fontified t) 1545 1559 (fontified t) 1559 1579 (fontified t) 1579 1582 (fontified t face font-lock-keyword-face) 1582 1650 (fontified t) 1650 1661 (fontified t face font-lock-builtin-face) 1661 1672 (fontified t) 1672 1683 (fontified t face font-lock-builtin-face) 1683 1704 (fontified t) 1704 1714 (fontified t face font-lock-keyword-face) 1714 1828 (fontified t) 1828 1832 (fontified t face font-lock-keyword-face) 1832 1859 (fontified t) 1859 1863 (fontified t) 1863 1864 (fontified t) 1864 1868 (fontified t face font-lock-keyword-face) 1868 1939 (fontified t)) #("(require 'helm)
(require 'helm-config)

;; The default \"C-x c\" is quite close to \"C-x C-c\", which quits Emacs.
;; Changed to \"C-c h\". Note: We must set \"C-c h\" globally, because we
;; cannot change `helm-command-prefix-key' once `helm-config' is loaded.
(global-set-key (kbd \"C-c h\") 'helm-command-prefix)
(global-unset-key (kbd \"C-x c\"))

(define-key helm-map (kbd \"<tab>\") 'helm-execute-persistent-action) ; rebind tab to run persistent action
(define-key helm-map (kbd \"C-i\") 'helm-execute-persistent-action) ; make TAB work in terminal
(define-key helm-map (kbd \"C-z\")  'helm-select-action) ; list actions using C-z

(when (executable-find \"curl\")
  (setq helm-google-suggest-use-curl-p t))

(setq helm-split-window-in-side-p           t ; open helm buffer inside current window, not occupy whole other window
      helm-move-to-line-cycle-in-source     t ; move to end or beginning of source when reaching top or bottom of source.
      helm-ff-search-library-in-sexp        t ; search for library in `require' and `declare-function' sexp.
      helm-scroll-amount                    8 ; scroll 8 lines other window using M-<next>/M-<prior>
      helm-ff-file-name-history-use-recentf t
      helm-echo-input-in-header-line t)

(defun spacemacs//helm-hide-minibuffer-maybe ()
  \"Hide minibuffer in Helm session if we use the header line as input field.\"
  (when (with-helm-buffer helm-echo-input-in-header-line)
    (let ((ov (make-overlay (point-min) (point-max) nil nil t)))
      (overlay-put ov 'window (selected-window))
      (overlay-put ov 'face
                   (let ((bg-color (face-background 'default nil)))
                     `(:background ,bg-color :foreground ,bg-color)))
      (setq-local cursor-type nil))))


(add-hook 'helm-minibuffer-set-up-hook
          'spacemacs//helm-hide-minibuffer-maybe)

(setq helm-autoresize-max-height 0)
(setq helm-autoresize-min-height 20)
(helm-autoresize-mode 1)

(helm-mode 1)" 0 1 (fontified t) 1 8 (fontified t face font-lock-keyword-face) 8 10 (fontified t) 10 14 (fontified t face font-lock-constant-face) 14 17 (fontified t) 17 24 (fontified t face font-lock-keyword-face) 24 26 (fontified t) 26 37 (fontified t face font-lock-constant-face) 37 38 (fontified t) 38 39 (fontified t) 39 40 (fontified t) 40 43 (fontified t face font-lock-comment-delimiter-face) 43 111 (fontified t face font-lock-comment-face) 111 114 (fontified t face font-lock-comment-delimiter-face) 114 181 (fontified t face font-lock-comment-face) 181 184 (fontified t face font-lock-comment-delimiter-face) 184 199 (fontified t face font-lock-comment-face) 199 203 (fontified t face (font-lock-constant-face font-lock-comment-face)) 203 222 (fontified t face (font-lock-constant-face font-lock-comment-face)) 222 230 (fontified t face font-lock-comment-face) 230 241 (fontified t face (font-lock-constant-face font-lock-comment-face)) 241 254 (fontified t face font-lock-comment-face) 254 275 (fontified t) 275 282 (fontified t face font-lock-string-face) 282 329 (fontified t) 329 336 (fontified t face font-lock-string-face) 336 366 (fontified t) 366 373 (fontified t face font-lock-string-face) 373 408 (fontified t) 408 410 (fontified t face font-lock-comment-delimiter-face) 410 446 (fontified t face font-lock-comment-face) 446 472 (fontified t) 472 477 (fontified t face font-lock-string-face) 477 512 (fontified t) 512 514 (fontified t face font-lock-comment-delimiter-face) 514 539 (fontified t face font-lock-comment-face) 539 540 (face font-lock-comment-face fontified t) 540 566 (fontified t) 566 571 (fontified t face font-lock-string-face) 571 595 (fontified t) 595 597 (fontified t face font-lock-comment-delimiter-face) 597 620 (fontified t face font-lock-comment-face) 620 622 (fontified t) 622 626 (fontified t face font-lock-keyword-face) 626 644 (fontified t) 644 650 (fontified t face font-lock-string-face) 650 655 (fontified t) 655 659 (fontified t face font-lock-keyword-face) 659 697 (fontified t) 697 701 (fontified t face font-lock-keyword-face) 701 742 (fontified t) 742 744 (fontified t face font-lock-comment-delimiter-face) 744 754 (fontified t face font-lock-comment-face) 754 814 (fontified t face font-lock-comment-face) 814 860 (fontified t) 860 862 (fontified t face font-lock-comment-delimiter-face) 862 936 (fontified t face font-lock-comment-face) 936 982 (fontified t) 982 984 (fontified t face font-lock-comment-delimiter-face) 984 1007 (fontified t face font-lock-comment-face) 1007 1014 (fontified t face (font-lock-constant-face font-lock-comment-face)) 1014 1021 (fontified t face font-lock-comment-face) 1021 1037 (fontified t face (font-lock-constant-face font-lock-comment-face)) 1037 1040 (fontified t face font-lock-comment-face) 1040 1045 (face font-lock-comment-face fontified t) 1045 1091 (fontified t) 1091 1093 (fontified t face font-lock-comment-delimiter-face) 1093 1146 (fontified t face font-lock-comment-face) 1146 1234 (fontified t) 1234 1239 (fontified t face font-lock-keyword-face) 1239 1240 (fontified t) 1240 1277 (fontified t face font-lock-function-name-face) 1277 1283 (fontified t) 1283 1314 (fontified t face font-lock-doc-face) 1314 1358 (fontified t face font-lock-doc-face) 1358 1359 (fontified t) 1359 1362 (fontified t) 1362 1366 (fontified t face font-lock-keyword-face) 1366 1422 (fontified t) 1422 1425 (fontified t face font-lock-keyword-face) 1425 1545 (fontified t) 1545 1559 (fontified t) 1559 1579 (fontified t) 1579 1582 (fontified t face font-lock-keyword-face) 1582 1650 (fontified t) 1650 1661 (fontified t face font-lock-builtin-face) 1661 1672 (fontified t) 1672 1683 (fontified t face font-lock-builtin-face) 1683 1704 (fontified t) 1704 1714 (fontified t face font-lock-keyword-face) 1714 1828 (fontified t) 1828 1832 (fontified t face font-lock-keyword-face) 1832 1859 (fontified t) 1859 1863 (fontified t) 1863 1864 (fontified t) 1864 1868 (fontified t face font-lock-keyword-face) 1868 1939 (fontified t)) #("(require 'helm)
(require 'helm-config)" 0 1 (fontified t) 1 8 (fontified t face font-lock-keyword-face) 8 10 (fontified t) 10 14 (fontified t face font-lock-constant-face) 14 17 (fontified t) 17 24 (fontified t face font-lock-keyword-face) 24 26 (fontified t) 26 37 (fontified t face font-lock-constant-face) 37 38 (fontified t)) #("(require 'helm)
(require 'helm-config)" 0 1 (fontified t) 1 8 (fontified t face font-lock-keyword-face) 8 10 (fontified t) 10 14 (fontified t face font-lock-constant-face) 14 17 (fontified t) 17 24 (fontified t face font-lock-keyword-face) 24 26 (fontified t) 26 37 (fontified t face font-lock-constant-face) 37 38 (fontified t)) "testsimpleclip!" "sr-speedbar.elc:Warning: reference to
    free variable ‘helm-alive-p’" "testsimpleclip!" #(" '(tabbar-separator ((t (:inherit tabbar-default :background \"#95CA59\"))))
 '(tabbar-unselected ((t (:inherit tabbar-default)))))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Cursor style and speed
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(setq-default cursor-type 'bar) ; change the shape of cursor
;;(set-cursor-color \"#ffffff\")  ; change the color of cursor

; change the speed of scrolling
(setq mouse-wheel-scroll-amount '(3 ((shift) .1) ((control) . nil)))
(setq mouse-wheel-progressive-speed nil)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Parenthesis setting
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(show-paren-mode t)
(setq show-paren-delay 0)
(setq show-paren-style 'expression) ; highlight entire bracket expression


" 0 2 (fontified t) 2 3 (fontified t face (rainbow-delimiters-depth-2-face)) 3 20 (fontified t) 20 21 (fontified t face (rainbow-delimiters-depth-3-face)) 21 22 (fontified t face (rainbow-delimiters-depth-4-face)) 22 24 (fontified t) 24 25 (fontified t face (rainbow-delimiters-depth-5-face)) 25 33 (fontified t face font-lock-builtin-face) 33 49 (fontified t) 49 60 (fontified t face font-lock-builtin-face) 60 61 (fontified t) 61 70 (fontified t face font-lock-string-face) 70 71 (fontified t face (rainbow-delimiters-depth-5-face)) 71 72 (fontified t face (rainbow-delimiters-depth-4-face)) 72 73 (fontified t face (rainbow-delimiters-depth-3-face)) 73 74 (fontified t face (rainbow-delimiters-depth-2-face)) 74 75 (fontified t) 75 77 (fontified t) 77 78 (fontified t face (rainbow-delimiters-depth-2-face)) 78 96 (fontified t) 96 97 (fontified t face (rainbow-delimiters-depth-3-face)) 97 98 (fontified t face (rainbow-delimiters-depth-4-face)) 98 100 (fontified t) 100 101 (fontified t face (rainbow-delimiters-depth-5-face)) 101 109 (fontified t face font-lock-builtin-face) 109 124 (fontified t) 124 125 (fontified t face (rainbow-delimiters-depth-5-face)) 125 126 (fontified t face (rainbow-delimiters-depth-4-face)) 126 127 (fontified t face (rainbow-delimiters-depth-3-face)) 127 128 (fontified t face (rainbow-delimiters-depth-2-face)) 128 129 (fontified t face (rainbow-delimiters-depth-1-face)) 129 130 (fontified t) 130 131 (fontified nil) 131 201 (fontified nil face font-lock-comment-delimiter-face) 201 202 (fontified nil face font-lock-comment-face) 202 205 (fontified nil face font-lock-comment-delimiter-face) 205 228 (fontified nil face font-lock-comment-face) 228 298 (fontified nil face font-lock-comment-delimiter-face) 298 299 (fontified nil face font-lock-comment-face) 299 300 (fontified nil face (rainbow-delimiters-depth-1-face)) 300 312 (fontified nil face font-lock-keyword-face) 312 329 (fontified nil) 329 330 (fontified nil face (rainbow-delimiters-depth-1-face)) 330 331 (fontified nil) 331 333 (fontified nil face font-lock-comment-delimiter-face) 333 360 (fontified nil face font-lock-comment-face) 360 362 (fontified nil face font-lock-comment-delimiter-face) 362 421 (fontified nil face font-lock-comment-face) 421 422 (fontified nil) 422 424 (fontified nil face font-lock-comment-delimiter-face) 424 454 (fontified nil face font-lock-comment-face) 454 455 (fontified nil face (rainbow-delimiters-depth-1-face)) 455 459 (fontified nil face font-lock-keyword-face) 459 487 (fontified nil) 487 488 (fontified nil face (rainbow-delimiters-depth-2-face)) 488 490 (fontified nil) 490 491 (fontified nil face (rainbow-delimiters-depth-3-face)) 491 492 (fontified nil face (rainbow-delimiters-depth-4-face)) 492 497 (fontified nil) 497 498 (fontified nil face (rainbow-delimiters-depth-4-face)) 498 501 (fontified nil) 501 502 (fontified nil face (rainbow-delimiters-depth-3-face)) 502 503 (fontified nil) 503 504 (fontified nil face (rainbow-delimiters-depth-3-face)) 504 505 (fontified nil face (rainbow-delimiters-depth-4-face)) 505 512 (fontified nil) 512 513 (fontified nil face (rainbow-delimiters-depth-4-face)) 513 519 (fontified nil) 519 520 (fontified nil face (rainbow-delimiters-depth-3-face)) 520 521 (fontified nil face (rainbow-delimiters-depth-2-face)) 521 522 (fontified nil face (rainbow-delimiters-depth-1-face)) 522 523 (fontified nil) 523 524 (fontified nil face (rainbow-delimiters-depth-1-face)) 524 528 (fontified nil face font-lock-keyword-face) 528 562 (fontified nil) 562 563 (fontified nil face (rainbow-delimiters-depth-1-face)) 563 565 (fontified nil) 565 635 (fontified nil face font-lock-comment-delimiter-face) 635 636 (fontified nil face font-lock-comment-face) 636 639 (fontified nil face font-lock-comment-delimiter-face) 639 659 (fontified nil face font-lock-comment-face) 659 729 (fontified nil face font-lock-comment-delimiter-face) 729 730 (fontified nil face font-lock-comment-face) 730 731 (fontified nil face (rainbow-delimiters-depth-1-face)) 731 748 (fontified nil) 748 749 (fontified nil face (rainbow-delimiters-depth-1-face)) 749 750 (fontified nil) 750 751 (fontified nil face (rainbow-delimiters-depth-1-face)) 751 755 (fontified nil face font-lock-keyword-face) 755 774 (fontified nil) 774 775 (fontified nil face (rainbow-delimiters-depth-1-face)) 775 776 (fontified nil) 776 777 (fontified nil face (rainbow-delimiters-depth-1-face)) 777 781 (fontified nil face font-lock-keyword-face) 781 810 (fontified nil) 810 811 (fontified nil face (rainbow-delimiters-depth-1-face)) 811 812 (fontified nil) 812 814 (fontified nil face font-lock-comment-delimiter-face) 814 850 (fontified nil face font-lock-comment-face) 850 851 (fontified nil) 851 852 (fontified nil)) "testsimpleclip!" #("191eb3a78b2f136519dcc04b8d061092e715bda15fdeadae" 0 48 (fontified t front-sticky (field inhibit-line-move-field-capture) rear-nonsticky t field output inhibit-line-move-field-capture t)) "testsimpleclip!" "(require 'helm)
(require 'helm-config)

;; The default \"C-x c\" is quite close to \"C-x C-c\", which quits Emacs.
;; Changed to \"C-c h\". Note: We must set \"C-c h\" globally, because we
;; cannot change `helm-command-prefix-key' once `helm-config' is loaded.
(global-set-key (kbd \"C-c h\") 'helm-command-prefix)
(global-unset-key (kbd \"C-x c\"))

(define-key helm-map (kbd \"<tab>\") 'helm-execute-persistent-action) ; rebind tab to run persistent action
(define-key helm-map (kbd \"C-i\") 'helm-execute-persistent-action) ; make TAB work in terminal
(define-key helm-map (kbd \"C-z\")  'helm-select-action) ; list actions using C-z

(when (executable-find \"curl\")
  (setq helm-google-suggest-use-curl-p t))

(setq helm-split-window-in-side-p           t ; open helm buffer inside current window, not occupy whole other window
      helm-move-to-line-cycle-in-source     t ; move to end or beginning of source when reaching top or bottom of source.
      helm-ff-search-library-in-sexp        t ; search for library in `require' and `declare-function' sexp.
      helm-scroll-amount                    8 ; scroll 8 lines other window using M-<next>/M-<prior>
      helm-ff-file-name-history-use-recentf t
      helm-echo-input-in-header-line t)

(defun spacemacs//helm-hide-minibuffer-maybe ()
  \"Hide minibuffer in Helm session if we use the header line as input field.\"
  (when (with-helm-buffer helm-echo-input-in-header-line)
    (let ((ov (make-overlay (point-min) (point-max) nil nil t)))
      (overlay-put ov 'window (selected-window))
      (overlay-put ov 'face
                   (let ((bg-color (face-background 'default nil)))
                     `(:background ,bg-color :foreground ,bg-color)))
      (setq-local cursor-type nil))))


(add-hook 'helm-minibuffer-set-up-hook
          'spacemacs//helm-hide-minibuffer-maybe)

(setq helm-autoresize-max-height 0)
(setq helm-autoresize-min-height 20)
(helm-autoresize-mode 1)

(helm-mode 1)" "apply: Symbol’s value as variable is void: helm-alive-p
Mark set
" "testsimpleclip!" #(";;------------------------------------------------------------" 0 1 (face font-lock-comment-delimiter-face fontified t) 1 2 (face font-lock-comment-delimiter-face fontified t) 2 31 (face font-lock-comment-face fontified t) 31 32 (face font-lock-comment-face fontified t rear-nonsticky t) 32 62 (face font-lock-comment-face fontified t)) #(";;------------------------------------------------------------" 0 1 (face font-lock-comment-delimiter-face fontified t) 1 2 (face font-lock-comment-delimiter-face fontified t) 2 31 (face font-lock-comment-face fontified t) 31 32 (face font-lock-comment-face fontified t rear-nonsticky t) 32 62 (face font-lock-comment-face fontified t)) #(";;------------------------------" 0 1 (face font-lock-comment-face fontified t) 1 2 (face font-lock-comment-face fontified t) 2 31 (face font-lock-comment-face fontified t) 31 32 (face font-lock-comment-face fontified t rear-nonsticky t)) #(";;------------------------------" 0 1 (face font-lock-comment-delimiter-face fontified t) 1 2 (face font-lock-comment-delimiter-face fontified t) 2 32 (face font-lock-comment-face fontified t)) #(";;------------------------------" 0 1 (face font-lock-comment-delimiter-face fontified t) 1 2 (face font-lock-comment-delimiter-face fontified t) 2 32 (face font-lock-comment-face fontified t)) #("(defadvice show-paren-function (after my-echo-paren-matching-line activate)
  \"t (blink-matching-open)))
    (when matching-text" 0 1 (face (rainbow-delimiters-depth-1-face) fontified t) 1 10 (face font-lock-keyword-face fontified t) 10 11 (fontified t) 11 30 (face font-lock-function-name-face fontified t) 30 31 (fontified t) 31 32 (face (rainbow-delimiters-depth-2-face) fontified t) 32 74 (fontified t) 74 75 (face (rainbow-delimiters-depth-2-face) fontified t) 75 76 (fontified t) 76 78 (fontified t) 78 79 (face font-lock-doc-face fontified t) 79 81 (face font-lock-doc-face fontified t) 81 82 (face font-lock-doc-face fontified t) 82 101 (face font-lock-doc-face fontified t) 101 102 (face font-lock-doc-face fontified t) 102 103 (face font-lock-doc-face fontified t) 103 104 (face font-lock-doc-face fontified t) 104 105 (face font-lock-doc-face fontified t) 105 109 (face font-lock-doc-face fontified t) 109 110 (face font-lock-doc-face fontified t) 110 114 (face font-lock-doc-face fontified t) 114 128 (face font-lock-doc-face fontified t)) #("(defadvice show-paren-function (after my-echo-paren-matching-line activate)
  \"t (blink-matching-open)))
    (when matching-text" 0 1 (face (rainbow-delimiters-depth-1-face) fontified t) 1 10 (face font-lock-keyword-face fontified t) 10 11 (fontified t) 11 30 (face font-lock-function-name-face fontified t) 30 31 (fontified t) 31 32 (face (rainbow-delimiters-depth-2-face) fontified t) 32 74 (fontified t) 74 75 (face (rainbow-delimiters-depth-2-face) fontified t) 75 76 (fontified t) 76 78 (fontified t) 78 79 (face font-lock-doc-face fontified t) 79 81 (face font-lock-doc-face fontified t) 81 82 (face font-lock-doc-face fontified t) 82 101 (face font-lock-doc-face fontified t) 101 102 (face font-lock-doc-face fontified t) 102 103 (face font-lock-doc-face fontified t) 103 104 (face font-lock-doc-face fontified t) 104 105 (face font-lock-doc-face fontified t) 105 109 (face font-lock-doc-face fontified t) 109 110 (face font-lock-doc-face fontified t) 110 114 (face font-lock-doc-face fontified t) 114 128 (face font-lock-doc-face fontified t)) #("If a matching paren is off-screen, echo the matching line.\"
  (when (char-qual (char-syntax (char-before (point))) ?\\))
    (let ((matching-tex" 0 59 (face font-lock-doc-face fontified t) 59 60 (fontified t) 60 62 (fontified t) 62 63 (face (rainbow-delimiters-depth-2-face) fontified t) 63 67 (face font-lock-keyword-face fontified t) 67 68 (fontified t) 68 69 (face (rainbow-delimiters-depth-3-face) fontified t) 69 79 (fontified t) 79 80 (face (rainbow-delimiters-depth-4-face) fontified t) 80 92 (fontified t) 92 93 (face (rainbow-delimiters-depth-5-face) fontified t) 93 94 (fontified t) 94 105 (fontified t) 105 106 (face (rainbow-delimiters-depth-6-face) fontified t) 106 111 (fontified t) 111 112 (face (rainbow-delimiters-depth-6-face) fontified t) 112 113 (face (rainbow-delimiters-depth-5-face) fontified t) 113 114 (face (rainbow-delimiters-depth-4-face) fontified t) 114 118 (fontified t) 118 119 (face (rainbow-delimiters-depth-3-face) fontified t) 119 120 (fontified t) 120 124 (fontified t) 124 125 (face (rainbow-delimiters-depth-3-face) fontified t) 125 128 (face font-lock-keyword-face fontified t) 128 129 (fontified t) 129 130 (face (rainbow-delimiters-depth-4-face) fontified t) 130 131 (face (rainbow-delimiters-depth-5-face) fontified t) 131 143 (fontified t)) #("If a matching paren is off-screen, echo the matching line.\"
  (when (char-qual (char-syntax (char-before (point))) ?\\))
    (let ((matching-tex" 0 59 (face font-lock-doc-face fontified t) 59 60 (fontified t) 60 62 (fontified t) 62 63 (face (rainbow-delimiters-depth-2-face) fontified t) 63 67 (face font-lock-keyword-face fontified t) 67 68 (fontified t) 68 69 (face (rainbow-delimiters-depth-3-face) fontified t) 69 79 (fontified t) 79 80 (face (rainbow-delimiters-depth-4-face) fontified t) 80 92 (fontified t) 92 93 (face (rainbow-delimiters-depth-5-face) fontified t) 93 94 (fontified t) 94 105 (fontified t) 105 106 (face (rainbow-delimiters-depth-6-face) fontified t) 106 111 (fontified t) 111 112 (face (rainbow-delimiters-depth-6-face) fontified t) 112 113 (face (rainbow-delimiters-depth-5-face) fontified t) 113 114 (face (rainbow-delimiters-depth-4-face) fontified t) 114 118 (fontified t) 118 119 (face (rainbow-delimiters-depth-3-face) fontified t) 119 120 (fontified t) 120 124 (fontified t) 124 125 (face (rainbow-delimiters-depth-3-face) fontified t) 125 128 (face font-lock-keyword-face fontified t) 128 129 (fontified t) 129 130 (face (rainbow-delimiters-depth-4-face) fontified t) 130 131 (face (rainbow-delimiters-depth-5-face) fontified t) 131 143 (fontified t)) #("(defadvice show-paren-function (after my-echo-paren-matching-line activate)
  \"If a matching paren is off-screen, echo the matching line.\"
  (when (char-qual (char-syntax (char-before (point))) ?\\))
    (let ((matching-text (blink-matching-open)))
    (when matching-text" 0 1 (face (rainbow-delimiters-depth-1-face) fontified t) 1 10 (face font-lock-keyword-face fontified t) 10 11 (fontified t) 11 30 (face font-lock-function-name-face fontified t) 30 31 (fontified t) 31 32 (face (rainbow-delimiters-depth-2-face) fontified t) 32 74 (fontified t) 74 75 (face (rainbow-delimiters-depth-2-face) fontified t) 75 76 (fontified t) 76 78 (fontified t) 78 138 (face font-lock-doc-face fontified t) 138 139 (fontified t) 139 141 (fontified t) 141 142 (face (rainbow-delimiters-depth-2-face) fontified t) 142 146 (face font-lock-keyword-face fontified t) 146 147 (fontified t) 147 148 (face (rainbow-delimiters-depth-3-face) fontified t) 148 158 (fontified t) 158 159 (face (rainbow-delimiters-depth-4-face) fontified t) 159 171 (fontified t) 171 172 (face (rainbow-delimiters-depth-5-face) fontified t) 172 173 (fontified t) 173 184 (fontified t) 184 185 (face (rainbow-delimiters-depth-6-face) fontified t) 185 190 (fontified t) 190 191 (face (rainbow-delimiters-depth-6-face) fontified t) 191 192 (face (rainbow-delimiters-depth-5-face) fontified t) 192 193 (face (rainbow-delimiters-depth-4-face) fontified t) 193 197 (fontified t) 197 198 (face (rainbow-delimiters-depth-3-face) fontified t) 198 199 (fontified t) 199 203 (fontified t) 203 204 (face (rainbow-delimiters-depth-3-face) fontified t) 204 207 (face font-lock-keyword-face fontified t) 207 208 (fontified t) 208 209 (face (rainbow-delimiters-depth-4-face) fontified t) 209 210 (face (rainbow-delimiters-depth-5-face) fontified t) 210 224 (fontified t) 224 225 (face (rainbow-delimiters-depth-6-face) fontified t) 225 244 (fontified t) 244 245 (face (rainbow-delimiters-depth-6-face) fontified t) 245 246 (face (rainbow-delimiters-depth-5-face) fontified t) 246 247 (face (rainbow-delimiters-depth-4-face) fontified t) 247 248 (fontified t) 248 252 (fontified t) 252 253 (face (rainbow-delimiters-depth-4-face) fontified t) 253 257 (face font-lock-keyword-face fontified t) 257 271 (fontified t)) #("(defadvice show-paren-function (after my-echo-paren-matching-line activate)
  \"If a matching paren is off-screen, echo the matching line.\"
  (when (char-qual (char-syntax (char-before (point))) ?\\))
    (let ((matching-text (blink-matching-open)))
    (when matching-text" 0 1 (face (rainbow-delimiters-depth-1-face) fontified t) 1 10 (face font-lock-keyword-face fontified t) 10 11 (fontified t) 11 30 (face font-lock-function-name-face fontified t) 30 31 (fontified t) 31 32 (face (rainbow-delimiters-depth-2-face) fontified t) 32 74 (fontified t) 74 75 (face (rainbow-delimiters-depth-2-face) fontified t) 75 76 (fontified t) 76 78 (fontified t) 78 138 (face font-lock-doc-face fontified t) 138 139 (fontified t) 139 141 (fontified t) 141 142 (face (rainbow-delimiters-depth-2-face) fontified t) 142 146 (face font-lock-keyword-face fontified t) 146 147 (fontified t) 147 148 (face (rainbow-delimiters-depth-3-face) fontified t) 148 158 (fontified t) 158 159 (face (rainbow-delimiters-depth-4-face) fontified t) 159 171 (fontified t) 171 172 (face (rainbow-delimiters-depth-5-face) fontified t) 172 173 (fontified t) 173 184 (fontified t) 184 185 (face (rainbow-delimiters-depth-6-face) fontified t) 185 190 (fontified t) 190 191 (face (rainbow-delimiters-depth-6-face) fontified t) 191 192 (face (rainbow-delimiters-depth-5-face) fontified t) 192 193 (face (rainbow-delimiters-depth-4-face) fontified t) 193 197 (fontified t) 197 198 (face (rainbow-delimiters-depth-3-face) fontified t) 198 199 (fontified t) 199 203 (fontified t) 203 204 (face (rainbow-delimiters-depth-3-face) fontified t) 204 207 (face font-lock-keyword-face fontified t) 207 208 (fontified t) 208 209 (face (rainbow-delimiters-depth-4-face) fontified t) 209 210 (face (rainbow-delimiters-depth-5-face) fontified t) 210 224 (fontified t) 224 225 (face (rainbow-delimiters-depth-6-face) fontified t) 225 244 (fontified t) 244 245 (face (rainbow-delimiters-depth-6-face) fontified t) 245 246 (face (rainbow-delimiters-depth-5-face) fontified t) 246 247 (face (rainbow-delimiters-depth-4-face) fontified t) 247 248 (fontified t) 248 252 (fontified t) 252 253 (face (rainbow-delimiters-depth-4-face) fontified t) 253 257 (face font-lock-keyword-face fontified t) 257 271 (fontified t)) #("  \"If a matching paren is off-screen, echo the matching line.\"
" 0 2 (fontified t) 2 62 (fontified t face font-lock-doc-face) 62 63 (fontified t)) #("  (when (char-equal (char-syntax (char-before (point))) ?\\))
" 0 2 (fontified t) 2 3 (fontified t face (rainbow-delimiters-depth-2-face)) 3 7 (fontified t face font-lock-keyword-face) 7 8 (fontified t) 8 9 (fontified t face (rainbow-delimiters-depth-3-face)) 9 20 (fontified t) 20 21 (fontified t face (rainbow-delimiters-depth-4-face)) 21 33 (fontified t) 33 34 (fontified t face (rainbow-delimiters-depth-5-face)) 34 35 (fontified t) 35 46 (fontified t) 46 47 (fontified t face (rainbow-delimiters-depth-6-face)) 47 52 (fontified t) 52 53 (fontified t face (rainbow-delimiters-depth-6-face)) 53 54 (fontified t face (rainbow-delimiters-depth-5-face)) 54 55 (fontified t face (rainbow-delimiters-depth-4-face)) 55 59 (fontified t) 59 60 (fontified t face (rainbow-delimiters-depth-3-face)) 60 61 (fontified t)) #("    (let ((matching-text (blink-matching-open)))
" 0 4 (fontified t) 4 5 (fontified t face (rainbow-delimiters-depth-3-face)) 5 8 (fontified t face font-lock-keyword-face) 8 9 (fontified t) 9 10 (fontified t face (rainbow-delimiters-depth-4-face)) 10 11 (fontified t face (rainbow-delimiters-depth-5-face)) 11 25 (fontified t) 25 26 (fontified t face (rainbow-delimiters-depth-6-face)) 26 45 (fontified t) 45 46 (fontified t face (rainbow-delimiters-depth-6-face)) 46 47 (fontified t face (rainbow-delimiters-depth-5-face)) 47 48 (fontified t face (rainbow-delimiters-depth-4-face)) 48 49 (fontified t)) #("      (when matching-text
" 0 6 (fontified t) 6 7 (fontified t face (rainbow-delimiters-depth-4-face)) 7 11 (fontified t face font-lock-keyword-face) 11 26 (fontified t)) #("        (message matching-text)))))" 0 8 (fontified t) 8 9 (face (rainbow-delimiters-depth-5-face) fontified t) 9 30 (fontified t) 30 31 (face (rainbow-delimiters-depth-5-face) fontified t) 31 32 (face (rainbow-delimiters-depth-4-face) fontified t) 32 33 (face (rainbow-delimiters-depth-3-face) fontified t) 33 34 (fontified t face (rainbow-delimiters-depth-2-face)) 34 35 (fontified t face (rainbow-delimiters-depth-1-face))) #("))" 0 1 (fontified t face (rainbow-delimiters-depth-2-face)) 1 2 (fontified t face (rainbow-delimiters-depth-1-face))) "parenthesis" #(";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Cursor style and speed
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;" 0 70 (face font-lock-comment-delimiter-face fontified t) 70 71 (face font-lock-comment-face fontified t) 71 74 (face font-lock-comment-delimiter-face fontified t) 74 97 (face font-lock-comment-face fontified t) 97 167 (face font-lock-comment-delimiter-face fontified t)) "testsimpleclip!" "(setq show-paren-style 'expression) ; highlight entire bracket expression" "(defadvice show-paren-function (after my-echo-paren-matching-line activate)
  \"If a matching paren is off-screen, echo the matching line.\"
  (when (char-equal (char-syntax (char-before (point))) ?\\))
    (let ((matching-text (blink-matching-open)))
      (when matching-text
        (message matching-text)))))" #("0)

(defadvdhow-pa
      (interacdtive)
      (let* ((cb (char-before (point)))
             (matching-text (and cb
                                 (char-equal (char-syntax cb) ?\\) )
                                 (blink-matching-open))))
        (when matching-text (message matching" 0 1 (fontified t) 1 2 (fontified t face (rainbow-delimiters-depth-1-face)) 2 3 (fontified t) 3 4 (fontified t) 4 5 (fontified t face (rainbow-delimiters-depth-1-face)) 5 12 (fontified t) 12 16 (fontified t) 16 18 (fontified t) 18 19 (fontified t) 19 25 (fontified t) 25 26 (fontified t face (rainbow-delimiters-depth-2-face)) 26 38 (fontified t) 38 39 (face (rainbow-delimiters-depth-2-face) fontified t) 39 40 (fontified t) 40 46 (fontified t) 46 47 (face (rainbow-delimiters-depth-2-face) fontified t) 47 51 (fontified t face font-lock-keyword-face) 51 52 (fontified t) 52 53 (fontified t face (rainbow-delimiters-depth-3-face)) 53 54 (fontified t face (rainbow-delimiters-depth-4-face)) 54 57 (fontified t) 57 58 (face (rainbow-delimiters-depth-5-face) fontified t) 58 63 (fontified t) 63 70 (fontified t) 70 71 (face (rainbow-delimiters-depth-6-face) fontified t) 71 76 (fontified t) 76 77 (fontified t face (rainbow-delimiters-depth-6-face)) 77 78 (fontified t face (rainbow-delimiters-depth-5-face)) 78 79 (fontified t face (rainbow-delimiters-depth-4-face)) 79 80 (fontified t) 80 93 (fontified t) 93 94 (fontified t face (rainbow-delimiters-depth-4-face)) 94 103 (fontified t) 103 108 (fontified t) 108 109 (fontified t face (rainbow-delimiters-depth-5-face)) 109 112 (face font-lock-keyword-face fontified t) 112 113 (fontified t) 113 116 (fontified t) 116 149 (fontified t) 149 150 (fontified t face (rainbow-delimiters-depth-6-face)) 150 155 (fontified t) 155 161 (fontified t) 161 162 (fontified t face (rainbow-delimiters-depth-7-face)) 162 167 (fontified t) 167 174 (fontified t) 174 176 (fontified t) 176 177 (face (rainbow-delimiters-depth-7-face) fontified t) 177 182 (fontified t) 182 183 (face (rainbow-delimiters-depth-6-face) fontified t) 183 184 (fontified t) 184 217 (fontified t) 217 218 (face (rainbow-delimiters-depth-6-face) fontified t) 218 224 (fontified t) 224 233 (fontified t) 233 237 (fontified t) 237 238 (fontified t face (rainbow-delimiters-depth-6-face)) 238 239 (fontified t face (rainbow-delimiters-depth-5-face)) 239 240 (fontified t face (rainbow-delimiters-depth-4-face)) 240 241 (fontified t face (rainbow-delimiters-depth-3-face)) 241 242 (fontified t) 242 250 (fontified t) 250 251 (fontified t face (rainbow-delimiters-depth-3-face)) 251 253 (face font-lock-keyword-face fontified t) 253 255 (face font-lock-keyword-face fontified t) 255 256 (fontified t) 256 265 (fontified t) 265 270 (fontified t) 270 271 (face (rainbow-delimiters-depth-4-face) fontified t) 271 279 (fontified t) 279 287 (fontified t)) #("    (interacdtive)
      (let* ((cb (char-before (point)))
             (matching-text (and cb
                                 (char-equal (char-syntax cb) ?\\) )
                                 (blink-matching-open))))
        (when matching-text (message matching" 0 4 (fontified t) 4 5 (face (rainbow-delimiters-depth-2-face) fontified t) 5 17 (fontified t) 17 18 (face (rainbow-delimiters-depth-2-face) fontified t) 18 19 (fontified t) 19 25 (fontified t) 25 26 (face (rainbow-delimiters-depth-2-face) fontified t) 26 30 (face font-lock-keyword-face fontified t) 30 31 (fontified t) 31 32 (face (rainbow-delimiters-depth-3-face) fontified t) 32 33 (face (rainbow-delimiters-depth-4-face) fontified t) 33 36 (fontified t) 36 37 (face (rainbow-delimiters-depth-5-face) fontified t) 37 49 (fontified t) 49 50 (face (rainbow-delimiters-depth-6-face) fontified t) 50 55 (fontified t) 55 56 (face (rainbow-delimiters-depth-6-face) fontified t) 56 57 (face (rainbow-delimiters-depth-5-face) fontified t) 57 58 (face (rainbow-delimiters-depth-4-face) fontified t) 58 72 (fontified t) 72 73 (face (rainbow-delimiters-depth-4-face) fontified t) 73 87 (fontified t) 87 88 (face (rainbow-delimiters-depth-5-face) fontified t) 88 91 (face font-lock-keyword-face fontified t) 91 128 (fontified t) 128 129 (face (rainbow-delimiters-depth-6-face) fontified t) 129 140 (fontified t) 140 141 (face (rainbow-delimiters-depth-7-face) fontified t) 141 155 (fontified t) 155 156 (face (rainbow-delimiters-depth-7-face) fontified t) 156 161 (fontified t) 161 162 (face (rainbow-delimiters-depth-6-face) fontified t) 162 196 (fontified t) 196 197 (face (rainbow-delimiters-depth-6-face) fontified t) 197 216 (fontified t) 216 217 (face (rainbow-delimiters-depth-6-face) fontified t) 217 218 (face (rainbow-delimiters-depth-5-face) fontified t) 218 219 (face (rainbow-delimiters-depth-4-face) fontified t) 219 220 (face (rainbow-delimiters-depth-3-face) fontified t) 220 221 (fontified t) 221 229 (fontified t) 229 230 (face (rainbow-delimiters-depth-3-face) fontified t) 230 232 (face font-lock-keyword-face fontified t) 232 234 (face font-lock-keyword-face fontified t) 234 249 (fontified t) 249 250 (face (rainbow-delimiters-depth-4-face) fontified t) 250 266 (fontified t)) #("text))))" 0 4 (fontified t) 4 5 (face (rainbow-delimiters-depth-4-face) fontified t) 5 6 (face (rainbow-delimiters-depth-3-face) fontified t) 6 7 (face (rainbow-delimiters-depth-2-face) fontified t) 7 8 (face (rainbow-delimiters-depth-1-face) fontified t)) "(defadvice show-paren-function (after my-echo-paren-matching-line activate)
  \"If a matching paren is off-screen, echo the matching line.\"
  (when (char-equal (char-syntax (char-before (point))) ?\\))
    (let ((matching-text (blink-matching-open)))
      (when matching-text
        (message matching-text)))))" #("point)))
             " 0 5 (fontified t) 5 6 (fontified t face (rainbow-delimiters-depth-6-face)) 6 7 (fontified t face (rainbow-delimiters-depth-5-face)) 7 8 (fontified t face (rainbow-delimiters-depth-4-face)) 8 9 (fontified t) 9 22 (fontified t)) #("      " 0 6 (fontified t)) "    (defadvice show-paren-function
      (after show-matching-paren-offscreen activate)
      \"If the matching paren is offscreen, show the matching line in the
        echo area. Has no effect if the character before point is not of
        the syntax class ')'.\"
      (interactive)
      (let* ((cb (char-before (point)))
             (matching-text (and cb
                                 (char-equal (char-syntax cb) ?\\) )
                                 (blink-matching-open))))
        (when matching-text (message matching-text))))" "(setq show-paren-delay 0)
" #(";;(require 'init-evil)" 0 2 (fontified t face font-lock-comment-delimiter-face) 2 22 (fontified t face font-lock-comment-face)) "testsimpleclip!" #("  (require 'init-httpd)
(require 'speedbar-extension)" 0 2 (fontified t) 2 3 (face (rainbow-delimiters-depth-2-face) fontified t) 3 10 (face font-lock-keyword-face fontified t) 10 12 (fontified t) 12 22 (face font-lock-constant-face fontified t) 22 23 (face (rainbow-delimiters-depth-2-face) fontified t) 23 24 (fontified t) 24 25 (face (rainbow-delimiters-depth-2-face) fontified t) 25 32 (face font-lock-keyword-face fontified t) 32 34 (fontified t) 34 52 (face font-lock-constant-face fontified t) 52 53 (face (rainbow-delimiters-depth-2-face) fontified t)) "testsimpleclip!" #(";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;" 0 1 (fontified t face font-lock-comment-delimiter-face) 1 2 (fontified t face font-lock-comment-delimiter-face) 2 3 (fontified t face font-lock-comment-delimiter-face) 3 4 (fontified t face font-lock-comment-delimiter-face) 4 5 (fontified t face font-lock-comment-delimiter-face) 5 6 (fontified t face font-lock-comment-delimiter-face) 6 7 (fontified t face font-lock-comment-delimiter-face) 7 8 (fontified t face font-lock-comment-delimiter-face) 8 9 (fontified t face font-lock-comment-delimiter-face) 9 10 (fontified t face font-lock-comment-delimiter-face) 10 11 (fontified t face font-lock-comment-delimiter-face) 11 12 (fontified t face font-lock-comment-delimiter-face) 12 13 (fontified t face font-lock-comment-delimiter-face) 13 14 (fontified t face font-lock-comment-delimiter-face) 14 15 (fontified t face font-lock-comment-delimiter-face) 15 16 (fontified t face font-lock-comment-delimiter-face) 16 17 (fontified t face font-lock-comment-delimiter-face) 17 18 (fontified t face font-lock-comment-delimiter-face) 18 19 (fontified t face font-lock-comment-delimiter-face) 19 20 (fontified t face font-lock-comment-delimiter-face) 20 21 (fontified t face font-lock-comment-delimiter-face) 21 22 (fontified t face font-lock-comment-delimiter-face) 22 23 (fontified t face font-lock-comment-delimiter-face) 23 24 (fontified t face font-lock-comment-delimiter-face) 24 25 (fontified t face font-lock-comment-delimiter-face) 25 26 (fontified t face font-lock-comment-delimiter-face) 26 27 (fontified t face font-lock-comment-delimiter-face) 27 28 (fontified t face font-lock-comment-delimiter-face) 28 29 (fontified t face font-lock-comment-delimiter-face) 29 30 (fontified t face font-lock-comment-delimiter-face) 30 31 (fontified t face font-lock-comment-delimiter-face) 31 32 (fontified t face font-lock-comment-delimiter-face) 32 33 (rear-nonsticky t fontified t face font-lock-comment-delimiter-face) 33 34 (fontified t face font-lock-comment-delimiter-face) 34 35 (fontified t face font-lock-comment-delimiter-face) 35 36 (fontified t face font-lock-comment-delimiter-face) 36 37 (fontified t face font-lock-comment-delimiter-face) 37 38 (fontified t face font-lock-comment-delimiter-face) 38 39 (fontified t face font-lock-comment-delimiter-face) 39 40 (fontified t face font-lock-comment-delimiter-face) 40 41 (fontified t face font-lock-comment-delimiter-face) 41 42 (fontified t face font-lock-comment-delimiter-face) 42 43 (fontified t face font-lock-comment-delimiter-face) 43 44 (fontified t face font-lock-comment-delimiter-face) 44 45 (fontified t face font-lock-comment-delimiter-face) 45 46 (fontified t face font-lock-comment-delimiter-face) 46 47 (fontified t face font-lock-comment-delimiter-face) 47 48 (fontified t face font-lock-comment-delimiter-face) 48 49 (fontified t face font-lock-comment-delimiter-face) 49 50 (fontified t face font-lock-comment-delimiter-face) 50 51 (fontified t face font-lock-comment-delimiter-face) 51 52 (fontified t face font-lock-comment-delimiter-face) 52 53 (fontified t face font-lock-comment-delimiter-face) 53 54 (fontified t face font-lock-comment-delimiter-face) 54 55 (fontified t face font-lock-comment-delimiter-face) 55 56 (fontified t face font-lock-comment-delimiter-face) 56 57 (fontified t face font-lock-comment-delimiter-face) 57 58 (fontified t face font-lock-comment-delimiter-face) 58 59 (fontified t face font-lock-comment-delimiter-face) 59 60 (fontified t face font-lock-comment-delimiter-face) 60 61 (fontified t face font-lock-comment-delimiter-face) 61 62 (fontified t face font-lock-comment-delimiter-face) 62 63 (fontified t face font-lock-comment-delimiter-face) 63 64 (fontified t face font-lock-comment-delimiter-face) 64 65 (fontified t face font-lock-comment-delimiter-face) 65 66 (fontified t face font-lock-comment-delimiter-face) 66 67 (fontified t face font-lock-comment-delimiter-face) 67 68 (fontified t face font-lock-comment-delimiter-face) 68 69 (fontified t face font-lock-comment-delimiter-face) 69 70 (fontified t face font-lock-comment-delimiter-face) 70 71 (fontified t face font-lock-comment-delimiter-face) 71 72 (fontified t face font-lock-comment-delimiter-face) 72 73 (fontified t face font-lock-comment-delimiter-face) 73 74 (fontified t face font-lock-comment-delimiter-face) 74 75 (fontified t face font-lock-comment-delimiter-face) 75 76 (fontified t face font-lock-comment-delimiter-face) 76 77 (fontified t face font-lock-comment-delimiter-face) 77 78 (fontified t face font-lock-comment-delimiter-face) 78 79 (fontified t face font-lock-comment-delimiter-face) 79 80 (fontified t face font-lock-comment-delimiter-face)) #(";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;" 0 1 (fontified t face font-lock-comment-delimiter-face) 1 2 (fontified t face font-lock-comment-delimiter-face) 2 3 (fontified t face font-lock-comment-delimiter-face) 3 4 (fontified t face font-lock-comment-delimiter-face) 4 5 (fontified t face font-lock-comment-delimiter-face) 5 6 (fontified t face font-lock-comment-delimiter-face) 6 7 (fontified t face font-lock-comment-delimiter-face) 7 8 (fontified t face font-lock-comment-delimiter-face) 8 9 (fontified t face font-lock-comment-delimiter-face) 9 10 (fontified t face font-lock-comment-delimiter-face) 10 11 (fontified t face font-lock-comment-delimiter-face) 11 12 (fontified t face font-lock-comment-delimiter-face) 12 13 (fontified t face font-lock-comment-delimiter-face) 13 14 (fontified t face font-lock-comment-delimiter-face) 14 15 (fontified t face font-lock-comment-delimiter-face) 15 16 (fontified t face font-lock-comment-delimiter-face) 16 17 (fontified t face font-lock-comment-delimiter-face) 17 18 (fontified t face font-lock-comment-delimiter-face) 18 19 (fontified t face font-lock-comment-delimiter-face) 19 20 (fontified t face font-lock-comment-delimiter-face) 20 21 (fontified t face font-lock-comment-delimiter-face) 21 22 (fontified t face font-lock-comment-delimiter-face) 22 23 (fontified t face font-lock-comment-delimiter-face) 23 24 (fontified t face font-lock-comment-delimiter-face) 24 25 (fontified t face font-lock-comment-delimiter-face) 25 26 (fontified t face font-lock-comment-delimiter-face) 26 27 (fontified t face font-lock-comment-delimiter-face) 27 28 (fontified t face font-lock-comment-delimiter-face) 28 29 (fontified t face font-lock-comment-delimiter-face) 29 30 (fontified t face font-lock-comment-delimiter-face) 30 31 (fontified t face font-lock-comment-delimiter-face) 31 32 (fontified t face font-lock-comment-delimiter-face) 32 33 (rear-nonsticky t fontified t face font-lock-comment-delimiter-face) 33 34 (fontified t face font-lock-comment-delimiter-face) 34 35 (fontified t face font-lock-comment-delimiter-face) 35 36 (fontified t face font-lock-comment-delimiter-face) 36 37 (fontified t face font-lock-comment-delimiter-face) 37 38 (fontified t face font-lock-comment-delimiter-face) 38 39 (fontified t face font-lock-comment-delimiter-face) 39 40 (fontified t face font-lock-comment-delimiter-face) 40 41 (fontified t face font-lock-comment-delimiter-face) 41 42 (fontified t face font-lock-comment-delimiter-face) 42 43 (fontified t face font-lock-comment-delimiter-face) 43 44 (fontified t face font-lock-comment-delimiter-face) 44 45 (fontified t face font-lock-comment-delimiter-face) 45 46 (fontified t face font-lock-comment-delimiter-face) 46 47 (fontified t face font-lock-comment-delimiter-face) 47 48 (fontified t face font-lock-comment-delimiter-face) 48 49 (fontified t face font-lock-comment-delimiter-face) 49 50 (fontified t face font-lock-comment-delimiter-face) 50 51 (fontified t face font-lock-comment-delimiter-face) 51 52 (fontified t face font-lock-comment-delimiter-face) 52 53 (fontified t face font-lock-comment-delimiter-face) 53 54 (fontified t face font-lock-comment-delimiter-face) 54 55 (fontified t face font-lock-comment-delimiter-face) 55 56 (fontified t face font-lock-comment-delimiter-face) 56 57 (fontified t face font-lock-comment-delimiter-face) 57 58 (fontified t face font-lock-comment-delimiter-face) 58 59 (fontified t face font-lock-comment-delimiter-face) 59 60 (fontified t face font-lock-comment-delimiter-face) 60 61 (fontified t face font-lock-comment-delimiter-face) 61 62 (fontified t face font-lock-comment-delimiter-face) 62 63 (fontified t face font-lock-comment-delimiter-face) 63 64 (fontified t face font-lock-comment-delimiter-face) 64 65 (fontified t face font-lock-comment-delimiter-face) 65 66 (fontified t face font-lock-comment-delimiter-face) 66 67 (fontified t face font-lock-comment-delimiter-face) 67 68 (fontified t face font-lock-comment-delimiter-face) 68 69 (fontified t face font-lock-comment-delimiter-face) 69 70 (fontified t face font-lock-comment-delimiter-face) 70 71 (fontified t face font-lock-comment-delimiter-face) 71 72 (fontified t face font-lock-comment-delimiter-face) 72 73 (fontified t face font-lock-comment-delimiter-face) 73 74 (fontified t face font-lock-comment-delimiter-face) 74 75 (fontified t face font-lock-comment-delimiter-face) 75 76 (fontified t face font-lock-comment-delimiter-face) 76 77 (fontified t face font-lock-comment-delimiter-face) 77 78 (fontified t face font-lock-comment-delimiter-face) 78 79 (fontified t face font-lock-comment-delimiter-face) 79 80 (fontified t face font-lock-comment-delimiter-face))))
